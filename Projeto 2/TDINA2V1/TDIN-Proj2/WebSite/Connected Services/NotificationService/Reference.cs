//------------------------------------------------------------------------------
// <auto-generated>
//     Este código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações a este ficheiro poderão provocar um comportamento incorrecto e perder-se-ão se
//     o código for regenerado.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebSite.NotificationService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NotificationService.INotificationService", CallbackContract=typeof(WebSite.NotificationService.INotificationServiceCallback))]
    public interface INotificationService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotificationService/Subscribe", ReplyAction="http://tempuri.org/INotificationService/SubscribeResponse")]
        System.Guid Subscribe();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotificationService/Subscribe", ReplyAction="http://tempuri.org/INotificationService/SubscribeResponse")]
        System.Threading.Tasks.Task<System.Guid> SubscribeAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/INotificationService/Unsubscribe")]
        void Unsubscribe(System.Guid clientId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/INotificationService/Unsubscribe")]
        System.Threading.Tasks.Task UnsubscribeAsync(System.Guid clientId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/INotificationService/KeepConnection")]
        void KeepConnection();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/INotificationService/KeepConnection")]
        System.Threading.Tasks.Task KeepConnectionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotificationService/SendMessage", ReplyAction="http://tempuri.org/INotificationService/SendMessageResponse")]
        void SendMessage(Common.EventOperation operation, System.Guid clientId, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotificationService/SendMessage", ReplyAction="http://tempuri.org/INotificationService/SendMessageResponse")]
        System.Threading.Tasks.Task SendMessageAsync(Common.EventOperation operation, System.Guid clientId, string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INotificationServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/INotificationService/HandleMessage")]
        void HandleMessage(Common.EventOperation operation);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INotificationServiceChannel : WebSite.NotificationService.INotificationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NotificationServiceClient : System.ServiceModel.DuplexClientBase<WebSite.NotificationService.INotificationService>, WebSite.NotificationService.INotificationService {
        
        public NotificationServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public NotificationServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public NotificationServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public NotificationServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public NotificationServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public System.Guid Subscribe() {
            return base.Channel.Subscribe();
        }
        
        public System.Threading.Tasks.Task<System.Guid> SubscribeAsync() {
            return base.Channel.SubscribeAsync();
        }
        
        public void Unsubscribe(System.Guid clientId) {
            base.Channel.Unsubscribe(clientId);
        }
        
        public System.Threading.Tasks.Task UnsubscribeAsync(System.Guid clientId) {
            return base.Channel.UnsubscribeAsync(clientId);
        }
        
        public void KeepConnection() {
            base.Channel.KeepConnection();
        }
        
        public System.Threading.Tasks.Task KeepConnectionAsync() {
            return base.Channel.KeepConnectionAsync();
        }
        
        public void SendMessage(Common.EventOperation operation, System.Guid clientId, string message) {
            base.Channel.SendMessage(operation, clientId, message);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(Common.EventOperation operation, System.Guid clientId, string message) {
            return base.Channel.SendMessageAsync(operation, clientId, message);
        }
    }
}
