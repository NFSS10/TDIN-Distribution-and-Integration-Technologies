//------------------------------------------------------------------------------
// <auto-generated>
//     Este código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações a este ficheiro poderão provocar um comportamento incorrecto e perder-se-ão se
//     o código for regenerado.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebSite.TicketsService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TicketsService.ITicketsService")]
    public interface ITicketsService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/HelloWorld", ReplyAction="http://tempuri.org/ITicketsService/HelloWorldResponse")]
        string HelloWorld();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/HelloWorld", ReplyAction="http://tempuri.org/ITicketsService/HelloWorldResponse")]
        System.Threading.Tasks.Task<string> HelloWorldAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/Test", ReplyAction="http://tempuri.org/ITicketsService/TestResponse")]
        string Test(string texto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/Test", ReplyAction="http://tempuri.org/ITicketsService/TestResponse")]
        System.Threading.Tasks.Task<string> TestAsync(string texto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/DebugTests", ReplyAction="http://tempuri.org/ITicketsService/DebugTestsResponse")]
        string DebugTests();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/DebugTests", ReplyAction="http://tempuri.org/ITicketsService/DebugTestsResponse")]
        System.Threading.Tasks.Task<string> DebugTestsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/AddTicket", ReplyAction="http://tempuri.org/ITicketsService/AddTicketResponse")]
        bool AddTicket(string title, string description, int author_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/AddTicket", ReplyAction="http://tempuri.org/ITicketsService/AddTicketResponse")]
        System.Threading.Tasks.Task<bool> AddTicketAsync(string title, string description, int author_id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITicketsService/SendQuestionToDepartment")]
        void SendQuestionToDepartment(string title, string question, int questionID, int ticketID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITicketsService/SendQuestionToDepartment")]
        System.Threading.Tasks.Task SendQuestionToDepartmentAsync(string title, string question, int questionID, int ticketID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/GetUnassignedTickets", ReplyAction="http://tempuri.org/ITicketsService/GetUnassignedTicketsResponse")]
        Common.Ticket[] GetUnassignedTickets();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/GetUnassignedTickets", ReplyAction="http://tempuri.org/ITicketsService/GetUnassignedTicketsResponse")]
        System.Threading.Tasks.Task<Common.Ticket[]> GetUnassignedTicketsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/AssignTicketToSolver", ReplyAction="http://tempuri.org/ITicketsService/AssignTicketToSolverResponse")]
        bool AssignTicketToSolver(int ticketId, int solverId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/AssignTicketToSolver", ReplyAction="http://tempuri.org/ITicketsService/AssignTicketToSolverResponse")]
        System.Threading.Tasks.Task<bool> AssignTicketToSolverAsync(int ticketId, int solverId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/Login", ReplyAction="http://tempuri.org/ITicketsService/LoginResponse")]
        Common.Solver Login(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/Login", ReplyAction="http://tempuri.org/ITicketsService/LoginResponse")]
        System.Threading.Tasks.Task<Common.Solver> LoginAsync(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/Register", ReplyAction="http://tempuri.org/ITicketsService/RegisterResponse")]
        bool Register(string name, string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/Register", ReplyAction="http://tempuri.org/ITicketsService/RegisterResponse")]
        System.Threading.Tasks.Task<bool> RegisterAsync(string name, string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/GetAssignedTickets", ReplyAction="http://tempuri.org/ITicketsService/GetAssignedTicketsResponse")]
        Common.Ticket[] GetAssignedTickets(int solverId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/GetAssignedTickets", ReplyAction="http://tempuri.org/ITicketsService/GetAssignedTicketsResponse")]
        System.Threading.Tasks.Task<Common.Ticket[]> GetAssignedTicketsAsync(int solverId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/GetTicket", ReplyAction="http://tempuri.org/ITicketsService/GetTicketResponse")]
        Common.Ticket GetTicket(int ticketId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/GetTicket", ReplyAction="http://tempuri.org/ITicketsService/GetTicketResponse")]
        System.Threading.Tasks.Task<Common.Ticket> GetTicketAsync(int ticketId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/AddQuestion", ReplyAction="http://tempuri.org/ITicketsService/AddQuestionResponse")]
        int AddQuestion(string title, string description, int departmentId, int ticketId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/AddQuestion", ReplyAction="http://tempuri.org/ITicketsService/AddQuestionResponse")]
        System.Threading.Tasks.Task<int> AddQuestionAsync(string title, string description, int departmentId, int ticketId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/UpdateTicketState", ReplyAction="http://tempuri.org/ITicketsService/UpdateTicketStateResponse")]
        bool UpdateTicketState(int ticketId, Common.TicketState newState);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/UpdateTicketState", ReplyAction="http://tempuri.org/ITicketsService/UpdateTicketStateResponse")]
        System.Threading.Tasks.Task<bool> UpdateTicketStateAsync(int ticketId, Common.TicketState newState);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/GetAuthorInfo", ReplyAction="http://tempuri.org/ITicketsService/GetAuthorInfoResponse")]
        Common.Worker GetAuthorInfo(int authorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/GetAuthorInfo", ReplyAction="http://tempuri.org/ITicketsService/GetAuthorInfoResponse")]
        System.Threading.Tasks.Task<Common.Worker> GetAuthorInfoAsync(int authorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/GetTicketQuestions", ReplyAction="http://tempuri.org/ITicketsService/GetTicketQuestionsResponse")]
        Common.Question[] GetTicketQuestions(int ticketId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/GetTicketQuestions", ReplyAction="http://tempuri.org/ITicketsService/GetTicketQuestionsResponse")]
        System.Threading.Tasks.Task<Common.Question[]> GetTicketQuestionsAsync(int ticketId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/CanCloseTicket", ReplyAction="http://tempuri.org/ITicketsService/CanCloseTicketResponse")]
        bool CanCloseTicket(int ticketId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/CanCloseTicket", ReplyAction="http://tempuri.org/ITicketsService/CanCloseTicketResponse")]
        System.Threading.Tasks.Task<bool> CanCloseTicketAsync(int ticketId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/DeleteTicketQuestions", ReplyAction="http://tempuri.org/ITicketsService/DeleteTicketQuestionsResponse")]
        bool DeleteTicketQuestions(int ticketId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/DeleteTicketQuestions", ReplyAction="http://tempuri.org/ITicketsService/DeleteTicketQuestionsResponse")]
        System.Threading.Tasks.Task<bool> DeleteTicketQuestionsAsync(int ticketId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/AnswerQuestion", ReplyAction="http://tempuri.org/ITicketsService/AnswerQuestionResponse")]
        bool AnswerQuestion(int questionID, string answer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/AnswerQuestion", ReplyAction="http://tempuri.org/ITicketsService/AnswerQuestionResponse")]
        System.Threading.Tasks.Task<bool> AnswerQuestionAsync(int questionID, string answer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/AddWorker", ReplyAction="http://tempuri.org/ITicketsService/AddWorkerResponse")]
        int AddWorker(string name, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/AddWorker", ReplyAction="http://tempuri.org/ITicketsService/AddWorkerResponse")]
        System.Threading.Tasks.Task<int> AddWorkerAsync(string name, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/GetAllWorkers", ReplyAction="http://tempuri.org/ITicketsService/GetAllWorkersResponse")]
        Common.Worker[] GetAllWorkers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/GetAllWorkers", ReplyAction="http://tempuri.org/ITicketsService/GetAllWorkersResponse")]
        System.Threading.Tasks.Task<Common.Worker[]> GetAllWorkersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/GetWorkerTroubleTickets", ReplyAction="http://tempuri.org/ITicketsService/GetWorkerTroubleTicketsResponse")]
        Common.Ticket[] GetWorkerTroubleTickets(int workerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/GetWorkerTroubleTickets", ReplyAction="http://tempuri.org/ITicketsService/GetWorkerTroubleTicketsResponse")]
        System.Threading.Tasks.Task<Common.Ticket[]> GetWorkerTroubleTicketsAsync(int workerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/SendEmail", ReplyAction="http://tempuri.org/ITicketsService/SendEmailResponse")]
        void SendEmail(string emailTo, string title, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/SendEmail", ReplyAction="http://tempuri.org/ITicketsService/SendEmailResponse")]
        System.Threading.Tasks.Task SendEmailAsync(string emailTo, string title, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/SolveTicket", ReplyAction="http://tempuri.org/ITicketsService/SolveTicketResponse")]
        bool SolveTicket(int ticketId, string solverName, string ticketTitle, string finalAnswer, string authorEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/SolveTicket", ReplyAction="http://tempuri.org/ITicketsService/SolveTicketResponse")]
        System.Threading.Tasks.Task<bool> SolveTicketAsync(int ticketId, string solverName, string ticketTitle, string finalAnswer, string authorEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/ClearServerDatabase", ReplyAction="http://tempuri.org/ITicketsService/ClearServerDatabaseResponse")]
        void ClearServerDatabase();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketsService/ClearServerDatabase", ReplyAction="http://tempuri.org/ITicketsService/ClearServerDatabaseResponse")]
        System.Threading.Tasks.Task ClearServerDatabaseAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITicketsServiceChannel : WebSite.TicketsService.ITicketsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TicketsServiceClient : System.ServiceModel.ClientBase<WebSite.TicketsService.ITicketsService>, WebSite.TicketsService.ITicketsService {
        
        public TicketsServiceClient() {
        }
        
        public TicketsServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TicketsServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TicketsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TicketsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string HelloWorld() {
            return base.Channel.HelloWorld();
        }
        
        public System.Threading.Tasks.Task<string> HelloWorldAsync() {
            return base.Channel.HelloWorldAsync();
        }
        
        public string Test(string texto) {
            return base.Channel.Test(texto);
        }
        
        public System.Threading.Tasks.Task<string> TestAsync(string texto) {
            return base.Channel.TestAsync(texto);
        }
        
        public string DebugTests() {
            return base.Channel.DebugTests();
        }
        
        public System.Threading.Tasks.Task<string> DebugTestsAsync() {
            return base.Channel.DebugTestsAsync();
        }
        
        public bool AddTicket(string title, string description, int author_id) {
            return base.Channel.AddTicket(title, description, author_id);
        }
        
        public System.Threading.Tasks.Task<bool> AddTicketAsync(string title, string description, int author_id) {
            return base.Channel.AddTicketAsync(title, description, author_id);
        }
        
        public void SendQuestionToDepartment(string title, string question, int questionID, int ticketID) {
            base.Channel.SendQuestionToDepartment(title, question, questionID, ticketID);
        }
        
        public System.Threading.Tasks.Task SendQuestionToDepartmentAsync(string title, string question, int questionID, int ticketID) {
            return base.Channel.SendQuestionToDepartmentAsync(title, question, questionID, ticketID);
        }
        
        public Common.Ticket[] GetUnassignedTickets() {
            return base.Channel.GetUnassignedTickets();
        }
        
        public System.Threading.Tasks.Task<Common.Ticket[]> GetUnassignedTicketsAsync() {
            return base.Channel.GetUnassignedTicketsAsync();
        }
        
        public bool AssignTicketToSolver(int ticketId, int solverId) {
            return base.Channel.AssignTicketToSolver(ticketId, solverId);
        }
        
        public System.Threading.Tasks.Task<bool> AssignTicketToSolverAsync(int ticketId, int solverId) {
            return base.Channel.AssignTicketToSolverAsync(ticketId, solverId);
        }
        
        public Common.Solver Login(string email, string password) {
            return base.Channel.Login(email, password);
        }
        
        public System.Threading.Tasks.Task<Common.Solver> LoginAsync(string email, string password) {
            return base.Channel.LoginAsync(email, password);
        }
        
        public bool Register(string name, string username, string password) {
            return base.Channel.Register(name, username, password);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterAsync(string name, string username, string password) {
            return base.Channel.RegisterAsync(name, username, password);
        }
        
        public Common.Ticket[] GetAssignedTickets(int solverId) {
            return base.Channel.GetAssignedTickets(solverId);
        }
        
        public System.Threading.Tasks.Task<Common.Ticket[]> GetAssignedTicketsAsync(int solverId) {
            return base.Channel.GetAssignedTicketsAsync(solverId);
        }
        
        public Common.Ticket GetTicket(int ticketId) {
            return base.Channel.GetTicket(ticketId);
        }
        
        public System.Threading.Tasks.Task<Common.Ticket> GetTicketAsync(int ticketId) {
            return base.Channel.GetTicketAsync(ticketId);
        }
        
        public int AddQuestion(string title, string description, int departmentId, int ticketId) {
            return base.Channel.AddQuestion(title, description, departmentId, ticketId);
        }
        
        public System.Threading.Tasks.Task<int> AddQuestionAsync(string title, string description, int departmentId, int ticketId) {
            return base.Channel.AddQuestionAsync(title, description, departmentId, ticketId);
        }
        
        public bool UpdateTicketState(int ticketId, Common.TicketState newState) {
            return base.Channel.UpdateTicketState(ticketId, newState);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateTicketStateAsync(int ticketId, Common.TicketState newState) {
            return base.Channel.UpdateTicketStateAsync(ticketId, newState);
        }
        
        public Common.Worker GetAuthorInfo(int authorId) {
            return base.Channel.GetAuthorInfo(authorId);
        }
        
        public System.Threading.Tasks.Task<Common.Worker> GetAuthorInfoAsync(int authorId) {
            return base.Channel.GetAuthorInfoAsync(authorId);
        }
        
        public Common.Question[] GetTicketQuestions(int ticketId) {
            return base.Channel.GetTicketQuestions(ticketId);
        }
        
        public System.Threading.Tasks.Task<Common.Question[]> GetTicketQuestionsAsync(int ticketId) {
            return base.Channel.GetTicketQuestionsAsync(ticketId);
        }
        
        public bool CanCloseTicket(int ticketId) {
            return base.Channel.CanCloseTicket(ticketId);
        }
        
        public System.Threading.Tasks.Task<bool> CanCloseTicketAsync(int ticketId) {
            return base.Channel.CanCloseTicketAsync(ticketId);
        }
        
        public bool DeleteTicketQuestions(int ticketId) {
            return base.Channel.DeleteTicketQuestions(ticketId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteTicketQuestionsAsync(int ticketId) {
            return base.Channel.DeleteTicketQuestionsAsync(ticketId);
        }
        
        public bool AnswerQuestion(int questionID, string answer) {
            return base.Channel.AnswerQuestion(questionID, answer);
        }
        
        public System.Threading.Tasks.Task<bool> AnswerQuestionAsync(int questionID, string answer) {
            return base.Channel.AnswerQuestionAsync(questionID, answer);
        }
        
        public int AddWorker(string name, string email) {
            return base.Channel.AddWorker(name, email);
        }
        
        public System.Threading.Tasks.Task<int> AddWorkerAsync(string name, string email) {
            return base.Channel.AddWorkerAsync(name, email);
        }
        
        public Common.Worker[] GetAllWorkers() {
            return base.Channel.GetAllWorkers();
        }
        
        public System.Threading.Tasks.Task<Common.Worker[]> GetAllWorkersAsync() {
            return base.Channel.GetAllWorkersAsync();
        }
        
        public Common.Ticket[] GetWorkerTroubleTickets(int workerID) {
            return base.Channel.GetWorkerTroubleTickets(workerID);
        }
        
        public System.Threading.Tasks.Task<Common.Ticket[]> GetWorkerTroubleTicketsAsync(int workerID) {
            return base.Channel.GetWorkerTroubleTicketsAsync(workerID);
        }
        
        public void SendEmail(string emailTo, string title, string message) {
            base.Channel.SendEmail(emailTo, title, message);
        }
        
        public System.Threading.Tasks.Task SendEmailAsync(string emailTo, string title, string message) {
            return base.Channel.SendEmailAsync(emailTo, title, message);
        }
        
        public bool SolveTicket(int ticketId, string solverName, string ticketTitle, string finalAnswer, string authorEmail) {
            return base.Channel.SolveTicket(ticketId, solverName, ticketTitle, finalAnswer, authorEmail);
        }
        
        public System.Threading.Tasks.Task<bool> SolveTicketAsync(int ticketId, string solverName, string ticketTitle, string finalAnswer, string authorEmail) {
            return base.Channel.SolveTicketAsync(ticketId, solverName, ticketTitle, finalAnswer, authorEmail);
        }
        
        public void ClearServerDatabase() {
            base.Channel.ClearServerDatabase();
        }
        
        public System.Threading.Tasks.Task ClearServerDatabaseAsync() {
            return base.Channel.ClearServerDatabaseAsync();
        }
    }
}
