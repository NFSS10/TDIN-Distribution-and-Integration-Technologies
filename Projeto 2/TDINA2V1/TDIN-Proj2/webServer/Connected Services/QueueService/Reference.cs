//------------------------------------------------------------------------------
// <auto-generated>
//     Este código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações a este ficheiro poderão provocar um comportamento incorrecto e perder-se-ão se
//     o código for regenerado.
// </auto-generated>
//------------------------------------------------------------------------------

namespace webServer.QueueService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="QueueService.IQueueService")]
    public interface IQueueService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IQueueService/ProcessQuestion")]
        void ProcessQuestion(string title, string question, int questionID, int ticketID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IQueueService/ProcessQuestion")]
        System.Threading.Tasks.Task ProcessQuestionAsync(string title, string question, int questionID, int ticketID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IQueueServiceChannel : webServer.QueueService.IQueueService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class QueueServiceClient : System.ServiceModel.ClientBase<webServer.QueueService.IQueueService>, webServer.QueueService.IQueueService {
        
        public QueueServiceClient() {
        }
        
        public QueueServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public QueueServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public QueueServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public QueueServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void ProcessQuestion(string title, string question, int questionID, int ticketID) {
            base.Channel.ProcessQuestion(title, question, questionID, ticketID);
        }
        
        public System.Threading.Tasks.Task ProcessQuestionAsync(string title, string question, int questionID, int ticketID) {
            return base.Channel.ProcessQuestionAsync(title, question, questionID, ticketID);
        }
    }
}
